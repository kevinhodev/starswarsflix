{"version":3,"sources":["components/Header/Header.jsx","components/Main/Entity.jsx","components/Main/Main.jsx","pages/HomePage.jsx","pages/PeoplesPage.jsx","pages/MoviesPage.jsx","pages/VehiclesPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Entity","props","href","link","name","icon","Main","type","HomePage","ALL_PEOPLES","gql","PeoplesPage","useQuery","loading","error","data","style","color","marginTop","overflowX","allPeople","people","map","birthYear","eyeColor","gender","hairColor","height","mass","skinColor","ALL_FILMS","MoviesPage","allFilms","films","title","episodeID","director","producers","releaseDate","producer","ALL_VEHICLES","VehiclesPage","allVehicles","vehicles","model","vehicleClass","manufacturers","costInCredits","length","crew","passengers","maxAtmospheringSpeed","cargoCapacity","consumables","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","basename","document","getElementById"],"mappings":"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","file":"static/js/main.7c851d48.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"tracking-in-expand\">\r\n        Star<span>Wars</span>Flix\r\n      </h1>\r\n      <div className=\"icon-container\">\r\n        <i className=\"fab fa-medapps fa-2x header-icon\"></i>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './Entity.css';\r\n\r\nfunction Entity(props) {\r\n  return (\r\n    <a href={props.link}>\r\n      <div className=\"entity-container\">\r\n        <h2> {props.name} </h2>\r\n        <i className={`fas ${props.icon} fa-3x`}></i>\r\n      </div>\r\n    </a>\r\n  );\r\n}\r\n\r\nexport default Entity;\r\n","import React from 'react';\r\nimport './Main.css';\r\nimport Entity from './Entity';\r\n\r\nfunction Main() {\r\n  return (\r\n    <div className=\"main-container\">\r\n      <Entity name=\"Pessoas\" type=\"people\" link=\"/peoples\" icon=\"fa-user\"></Entity>\r\n      <Entity name=\"Filmes\" type=\"movie\" link=\"/movies\" icon=\"fa-film\"></Entity>\r\n      <Entity name=\"Veículos\" type=\"vehicle\" link=\"/vehicles\" icon=\"fa-car\"></Entity>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Main;\r\n","import React from 'react';\r\nimport Main from '../components/Main/Main';\r\n\r\nfunction HomePage() {\r\n  return (\r\n    <div>\r\n      <Main></Main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","import React from 'react';\r\nimport './PeoplesPage.css';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst ALL_PEOPLES = gql`\r\n  {\r\n    allPeople {\r\n      people {\r\n        name\r\n        birthYear\r\n        eyeColor\r\n        gender\r\n        hairColor\r\n        height\r\n        mass\r\n        skinColor\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction PeoplesPage() {\r\n  const { loading, error, data } = useQuery(ALL_PEOPLES);\r\n\r\n  if (loading)\r\n    return (\r\n      <div>\r\n        <h1 style={{ color: 'black', marginTop: '10em' }}>Carregando Dados...</h1>\r\n        <i className=\"fas fa-spinner fa-2x\"></i>\r\n      </div>\r\n    );\r\n  if (error)\r\n    return (\r\n      <div>\r\n        <p>Erro :(</p>\r\n        <p> Verifique o Console Para Mais Informações! </p>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <div style={{ overflowX: 'auto' }}>\r\n        <h2> Pessoas </h2>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th> Nome </th>\r\n              <th> Aiversário</th>\r\n              <th> Cor dos Olhos </th>\r\n              <th> Gênero </th>\r\n              <th> Cor do Cabelo </th>\r\n              <th> Altura </th>\r\n              <th> Massa </th>\r\n              <th> Cor da Pele </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.allPeople.people.map(\r\n              ({ name, birthYear, eyeColor, gender, hairColor, height, mass, skinColor }) => (\r\n                <tr key={name}>\r\n                  <th>{name}</th>\r\n                  <th>{birthYear}</th>\r\n                  <th>{eyeColor}</th>\r\n                  <th>{gender}</th>\r\n                  <th>{hairColor}</th>\r\n                  <th>{height}</th>\r\n                  <th>{mass}</th>\r\n                  <th>{skinColor}</th>\r\n                </tr>\r\n              )\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PeoplesPage;\r\n","import React from 'react';\r\nimport './MoviesPage.css';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst ALL_FILMS = gql`\r\n  {\r\n    allFilms {\r\n      films {\r\n        title\r\n        episodeID\r\n        director\r\n        producers\r\n        releaseDate\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction MoviesPage() {\r\n  const { loading, error, data } = useQuery(ALL_FILMS);\r\n\r\n  if (loading)\r\n    return (\r\n      <div>\r\n        <h1 style={{ color: 'black', marginTop: '10em' }}>Carregando Dados...</h1>\r\n        <i className=\"fas fa-spinner fa-2x\"></i>\r\n      </div>\r\n    );\r\n  if (error)\r\n    return (\r\n      <div>\r\n        <p>Erro :(</p>\r\n        <p> Verifique o Console Para Mais Informações! </p>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <h2> Filmes </h2>\r\n      <div style={{ overflowX: 'auto' }}>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th> Título </th>\r\n              <th> ID do Episódio </th>\r\n              <th> Diretor </th>\r\n              <th> Produtores </th>\r\n              <th> Data de Lançamento </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.allFilms.films.map(({ title, episodeID, director, producers, releaseDate }) => (\r\n              <tr key={title}>\r\n                <th>{title}</th>\r\n                <th>{episodeID}</th>\r\n                <th>{director}</th>\r\n                <th>\r\n                  {producers.map((producer) => (\r\n                    <p key={producer}>{producer}</p>\r\n                  ))}\r\n                </th>\r\n                <th>{releaseDate}</th>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoviesPage;\r\n","import React from 'react';\r\nimport './VehiclesPage.css';\r\nimport { useQuery, gql } from '@apollo/client';\r\n\r\nconst ALL_VEHICLES = gql`\r\n  {\r\n    allVehicles {\r\n      vehicles {\r\n        name\r\n        model\r\n        vehicleClass\r\n        manufacturers\r\n        costInCredits\r\n        length\r\n        crew\r\n        passengers\r\n        maxAtmospheringSpeed\r\n        cargoCapacity\r\n        consumables\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nfunction VehiclesPage() {\r\n  const { loading, error, data } = useQuery(ALL_VEHICLES);\r\n\r\n  if (loading)\r\n    return (\r\n      <div>\r\n        <h1 style={{ color: 'black', marginTop: '10em' }}>Carregando Dados...</h1>\r\n        <i className=\"fas fa-spinner fa-2x\"></i>\r\n      </div>\r\n    );\r\n  if (error)\r\n    return (\r\n      <div>\r\n        <p>Erro :(</p>\r\n        <p> Verifique o Console Para Mais Informações! </p>\r\n      </div>\r\n    );\r\n\r\n  return (\r\n    <div className=\"content\">\r\n      <h2> Veículos </h2>\r\n      <div style={{ overflowX: 'auto' }}>\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              <th> Nome </th>\r\n              <th> Modelo </th>\r\n              <th> Classe do Veículo </th>\r\n              <th> Fabricantes </th>\r\n              <th> Custo em Créditos </th>\r\n              <th> Tamanho </th>\r\n              <th> Tripulação </th>\r\n              <th> Passageiros </th>\r\n              <th> Velocidade Máxima da Atmosfera </th>\r\n              <th> Capacidade de Carga </th>\r\n              <th> Consumíveis </th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {data.allVehicles.vehicles.map(\r\n              ({\r\n                name,\r\n                model,\r\n                vehicleClass,\r\n                manufacturers,\r\n                costInCredits,\r\n                length,\r\n                crew,\r\n                passengers,\r\n                maxAtmospheringSpeed,\r\n                cargoCapacity,\r\n                consumables,\r\n              }) => (\r\n                <tr key={name}>\r\n                  <th>{name}</th>\r\n                  <th>{model}</th>\r\n                  <th>{vehicleClass}</th>\r\n                  <th>\r\n                    {manufacturers.map((manufacturers) => (\r\n                      <p key={manufacturers}>{manufacturers}</p>\r\n                    ))}\r\n                  </th>\r\n                  <th>{costInCredits}</th>\r\n                  <th>{length}</th>\r\n                  <th>{crew}</th>\r\n                  <th>{passengers}</th>\r\n                  <th>{maxAtmospheringSpeed}</th>\r\n                  <th>{cargoCapacity}</th>\r\n                  <th>{consumables}</th>\r\n                </tr>\r\n              )\r\n            )}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VehiclesPage;\r\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport HomePage from './pages/HomePage';\nimport PeoplesPage from './pages/PeoplesPage';\nimport MoviesPage from './pages/MoviesPage';\nimport VehiclesPage from './pages/VehiclesPage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header></Header>\n      <Switch>\n        <Route exact path=\"/\" component={HomePage} />\n        <Route path=\"/peoples\" component={PeoplesPage} />\n        <Route path=\"/movies\" component={MoviesPage} />\n        <Route path=\"/vehicles\" component={VehiclesPage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { ApolloProvider } from '@apollo/client/react';\n\nconst client = new ApolloClient({\n  uri: 'https://swapi-graphql.netlify.app/.netlify/functions/index',\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <HashRouter basename=\"/\">\n      <App />\n    </HashRouter>\n  </ApolloProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}